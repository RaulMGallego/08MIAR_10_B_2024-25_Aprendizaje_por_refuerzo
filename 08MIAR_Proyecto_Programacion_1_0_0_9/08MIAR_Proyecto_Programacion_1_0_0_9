{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "jUehXgCyIRdq"
   },
   "source": [
    "# Actividad - Proyecto práctico\n",
    "\n",
    "\n",
    "> La actividad se desarrollará en grupos pre-definidos de 2-3 alumnos. Se debe indicar los nombres en orden alfabético (de apellidos). Recordad que esta actividad se corresponde con un 30% de la nota final de la asignatura. Se debe entregar entregar el trabajo en la presente notebook.\n",
    "*   Alumno 1: Marta Castillo Galán\n",
    "*   Alumno 2: Unai Marín Etxebarria\n",
    "*   Alumno 3: Laura Molinos Mayo\n",
    "*   Alumno 4: Raúl Murillo Gallego\n",
    "\n",
    "\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4hzP_5ZuGb2X"
   },
   "source": [
    "---\n",
    "## **PARTE 2**. Enunciado\n",
    "\n",
    "Consideraciones a tener en cuenta:\n",
    "\n",
    "- El entorno sobre el que trabajaremos será _SpaceInvaders-v0_ y el algoritmo que usaremos será _DQN_.\n",
    "\n",
    "- Para nuestro ejercicio, el requisito mínimo será alcanzado cuando el agente consiga una **media de recompensa por encima de 20 puntos en modo test**. Por ello, esta media de la recompensa se calculará a partir del código de test en la última celda del notebook.\n",
    "\n",
    "Este proyecto práctico consta de tres partes:\n",
    "\n",
    "1.   Implementar la red neuronal que se usará en la solución\n",
    "2.   Implementar las distintas piezas de la solución DQN\n",
    "3.   Justificar la respuesta en relación a los resultados obtenidos\n",
    "\n",
    "**Rúbrica**: Se valorará la originalidad en la solución aportada, así como la capacidad de discutir los resultados de forma detallada. El requisito mínimo servirá para aprobar la actividad, bajo premisa de que la discusión del resultado sera apropiada.\n",
    "\n",
    "IMPORTANTE:\n",
    "\n",
    "* Si no se consigue una puntuación óptima, responder sobre la mejor puntuación obtenida.\n",
    "* Para entrenamientos largos, recordad que podéis usar checkpoints de vuestros modelos para retomar los entrenamientos. En este caso, recordad cambiar los parámetros adecuadamente (sobre todo los relacionados con el proceso de exploración).\n",
    "* Se deberá entregar unicamente el notebook y los pesos del mejor modelo en un fichero .zip, de forma organizada.\n",
    "* Cada alumno deberá de subir la solución de forma individual."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6_b3mzw8IzJP"
   },
   "source": [
    "---\n",
    "## **PARTE 3**. Desarrollo y preguntas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "duPmUNOVGb2a"
   },
   "source": [
    "#### Importar librerías"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "id": "j3eRhgI-Gb2a"
   },
   "outputs": [],
   "source": [
    "from __future__ import division\n",
    "\n",
    "from PIL import Image\n",
    "import numpy as np\n",
    "import gym\n",
    "\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, Activation, Flatten, Convolution2D, Permute, BatchNormalization, Dropout\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "import tensorflow.keras.backend as K\n",
    "\n",
    "from rl.agents.dqn import DQNAgent\n",
    "from rl.policy import LinearAnnealedPolicy, BoltzmannQPolicy, EpsGreedyQPolicy\n",
    "from rl.memory import SequentialMemory\n",
    "from rl.core import Processor\n",
    "from rl.callbacks import FileLogger, ModelIntervalCheckpoint\n",
    "\n",
    "from tensorflow.keras.optimizers import RMSprop\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "f4jgQjzoGb2a"
   },
   "source": [
    "#### Configuración base"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "jwOE6I_KGb2a"
   },
   "outputs": [],
   "source": [
    "INPUT_SHAPE = (84, 84)\n",
    "WINDOW_LENGTH = 4\n",
    "\n",
    "env_name = 'SpaceInvaders-v0'\n",
    "env = gym.make(env_name)\n",
    "\n",
    "np.random.seed(123)\n",
    "env.seed(123)\n",
    "nb_actions = env.action_space.n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "9jGEZUcpGb2a"
   },
   "outputs": [],
   "source": [
    "class AtariProcessor(Processor):\n",
    "    def process_observation(self, observation):\n",
    "        assert observation.ndim == 3  # (height, width, channel)\n",
    "        img = Image.fromarray(observation)\n",
    "        img = img.resize(INPUT_SHAPE).convert('L')\n",
    "        processed_observation = np.array(img)\n",
    "        assert processed_observation.shape == INPUT_SHAPE\n",
    "        return processed_observation.astype('uint8')\n",
    "\n",
    "    def process_state_batch(self, batch):\n",
    "        processed_batch = batch.astype('float32') / 255.\n",
    "        return processed_batch\n",
    "\n",
    "    def process_reward(self, reward):\n",
    "        return np.clip(reward, -1., 1.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "7yitXTADGb2b"
   },
   "source": [
    "1. Implementación de la red neuronal"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "id": "O4GKrfWSGb2b"
   },
   "outputs": [],
   "source": [
    "def build_model(window_length, input_shape, nb_actions):\n",
    "    model = Sequential()\n",
    "    model.add(Permute((2, 3, 1), input_shape=(window_length,) + input_shape))  # (window, 84, 84) → (84, 84, window)\n",
    "    model.add(Convolution2D(32, (8, 8), strides=(4, 4), activation='relu'))\n",
    "    model.add(Convolution2D(64, (4, 4), strides=(2, 2), activation='relu'))\n",
    "    model.add(Convolution2D(64, (3, 3), strides=(1, 1), activation='relu'))\n",
    "    model.add(Flatten())\n",
    "    model.add(Dense(512, activation='relu'))\n",
    "    model.add(Dense(nb_actions, activation='linear'))\n",
    "    return model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "OB9-_5HPGb2b"
   },
   "source": [
    "2. Implementación de la solución DQN"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "id": "foSlxWH1Gb2b"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "permute (Permute)            (None, 84, 84, 4)         0         \n",
      "_________________________________________________________________\n",
      "conv2d (Conv2D)              (None, 20, 20, 32)        8224      \n",
      "_________________________________________________________________\n",
      "conv2d_1 (Conv2D)            (None, 9, 9, 64)          32832     \n",
      "_________________________________________________________________\n",
      "conv2d_2 (Conv2D)            (None, 7, 7, 64)          36928     \n",
      "_________________________________________________________________\n",
      "flatten (Flatten)            (None, 3136)              0         \n",
      "_________________________________________________________________\n",
      "dense (Dense)                (None, 512)               1606144   \n",
      "_________________________________________________________________\n",
      "dense_1 (Dense)              (None, 6)                 3078      \n",
      "=================================================================\n",
      "Total params: 1,687,206\n",
      "Trainable params: 1,687,206\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n",
      "None\n"
     ]
    }
   ],
   "source": [
    "# Preparamos memoria y política\n",
    "memory = SequentialMemory(limit=1000000, window_length=WINDOW_LENGTH)\n",
    "policy = LinearAnnealedPolicy(EpsGreedyQPolicy(),\n",
    "                              attr='eps',\n",
    "                              value_max=1.0,\n",
    "                              value_min=0.1,\n",
    "                              value_test=0.05,\n",
    "                              nb_steps=1000000) \n",
    "\n",
    "# Creamos el modelo\n",
    "model = build_model(WINDOW_LENGTH, INPUT_SHAPE, nb_actions)\n",
    "print(model.summary())\n",
    "\n",
    "# Creamos el procesador\n",
    "processor = AtariProcessor()\n",
    "\n",
    "#Creamos el agente\n",
    "dqn = DQNAgent(model=model,\n",
    "               nb_actions=nb_actions,\n",
    "               policy=policy,\n",
    "               memory=memory,\n",
    "               processor=processor,\n",
    "               nb_steps_warmup = 50000,\n",
    "               gamma=0.99,\n",
    "               train_interval=4,\n",
    "               delta_clip=1.0)\n",
    "\n",
    "dqn.compile(Adam(learning_rate=0.00025), metrics=['mae'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training for 1500000 steps ...\n",
      "Interval 1 (0 steps performed)\n",
      "    6/10000 [..............................] - ETA: 2:01 - reward: 0.0000e+00 "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\laura\\anaconda3\\envs\\miar_rl\\lib\\site-packages\\tensorflow\\python\\keras\\engine\\training.py:2426: UserWarning: `Model.state_updates` will be removed in a future version. This property should not be used in TensorFlow 2.0, as `updates` are applied automatically.\n",
      "  warnings.warn('`Model.state_updates` will be removed in a future version. '\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10000/10000 [==============================] - 103s 10ms/step - reward: 0.0135\n",
      "15 episodes - episode_reward: 8.667 [2.000, 12.000] - ale.lives: 2.050\n",
      "\n",
      "Interval 2 (10000 steps performed)\n",
      "10000/10000 [==============================] - 48s 5ms/step - reward: 0.0130\n",
      "16 episodes - episode_reward: 8.188 [4.000, 12.000] - ale.lives: 2.049\n",
      "\n",
      "Interval 3 (20000 steps performed)\n",
      "10000/10000 [==============================] - 42s 4ms/step - reward: 0.0151\n",
      "14 episodes - episode_reward: 10.500 [1.000, 20.000] - ale.lives: 2.088\n",
      "\n",
      "Interval 4 (30000 steps performed)\n",
      "10000/10000 [==============================] - 42s 4ms/step - reward: 0.0153\n",
      "13 episodes - episode_reward: 11.462 [5.000, 20.000] - ale.lives: 2.075\n",
      "\n",
      "Interval 5 (40000 steps performed)\n",
      "10000/10000 [==============================] - 42s 4ms/step - reward: 0.0143\n",
      "14 episodes - episode_reward: 11.071 [4.000, 24.000] - ale.lives: 2.089\n",
      "\n",
      "Interval 6 (50000 steps performed)\n",
      "10000/10000 [==============================] - 301s 30ms/step - reward: 0.0142\n",
      "13 episodes - episode_reward: 10.923 [5.000, 17.000] - loss: 0.007 - mae: 0.052 - mean_q: 0.068 - mean_eps: 0.951 - ale.lives: 2.005\n",
      "\n",
      "Interval 7 (60000 steps performed)\n",
      "10000/10000 [==============================] - 303s 30ms/step - reward: 0.0145\n",
      "13 episodes - episode_reward: 11.154 [6.000, 21.000] - loss: 0.007 - mae: 0.065 - mean_q: 0.083 - mean_eps: 0.942 - ale.lives: 2.073\n",
      "\n",
      "Interval 8 (70000 steps performed)\n",
      "10000/10000 [==============================] - 308s 31ms/step - reward: 0.0153\n",
      "14 episodes - episode_reward: 10.071 [5.000, 16.000] - loss: 0.007 - mae: 0.087 - mean_q: 0.111 - mean_eps: 0.933 - ale.lives: 2.058\n",
      "\n",
      "Interval 9 (80000 steps performed)\n",
      "10000/10000 [==============================] - 302s 30ms/step - reward: 0.0141\n",
      "15 episodes - episode_reward: 9.467 [3.000, 23.000] - loss: 0.007 - mae: 0.121 - mean_q: 0.155 - mean_eps: 0.924 - ale.lives: 2.098\n",
      "\n",
      "Interval 10 (90000 steps performed)\n",
      "10000/10000 [==============================] - 301s 30ms/step - reward: 0.0130\n",
      "13 episodes - episode_reward: 10.231 [5.000, 20.000] - loss: 0.007 - mae: 0.144 - mean_q: 0.182 - mean_eps: 0.915 - ale.lives: 2.009\n",
      "\n",
      "Interval 11 (100000 steps performed)\n",
      "10000/10000 [==============================] - 315s 31ms/step - reward: 0.0126\n",
      "15 episodes - episode_reward: 8.400 [2.000, 13.000] - loss: 0.007 - mae: 0.161 - mean_q: 0.202 - mean_eps: 0.906 - ale.lives: 2.190\n",
      "\n",
      "Interval 12 (110000 steps performed)\n",
      "10000/10000 [==============================] - 306s 31ms/step - reward: 0.0144\n",
      "16 episodes - episode_reward: 9.188 [1.000, 15.000] - loss: 0.007 - mae: 0.192 - mean_q: 0.241 - mean_eps: 0.897 - ale.lives: 2.130\n",
      "\n",
      "Interval 13 (120000 steps performed)\n",
      "10000/10000 [==============================] - 309s 31ms/step - reward: 0.0147\n",
      "13 episodes - episode_reward: 11.462 [2.000, 25.000] - loss: 0.007 - mae: 0.226 - mean_q: 0.282 - mean_eps: 0.888 - ale.lives: 2.034\n",
      "\n",
      "Interval 14 (130000 steps performed)\n",
      "10000/10000 [==============================] - 311s 31ms/step - reward: 0.0152\n",
      "14 episodes - episode_reward: 11.071 [4.000, 18.000] - loss: 0.007 - mae: 0.247 - mean_q: 0.308 - mean_eps: 0.879 - ale.lives: 2.113\n",
      "\n",
      "Interval 15 (140000 steps performed)\n",
      "10000/10000 [==============================] - 317s 32ms/step - reward: 0.0148\n",
      "14 episodes - episode_reward: 10.500 [6.000, 18.000] - loss: 0.007 - mae: 0.273 - mean_q: 0.340 - mean_eps: 0.870 - ale.lives: 2.071\n",
      "\n",
      "Interval 16 (150000 steps performed)\n",
      "10000/10000 [==============================] - 314s 31ms/step - reward: 0.0139\n",
      "12 episodes - episode_reward: 10.250 [4.000, 16.000] - loss: 0.007 - mae: 0.306 - mean_q: 0.380 - mean_eps: 0.861 - ale.lives: 2.200\n",
      "\n",
      "Interval 17 (160000 steps performed)\n",
      "10000/10000 [==============================] - 320s 32ms/step - reward: 0.0152\n",
      "12 episodes - episode_reward: 13.500 [6.000, 20.000] - loss: 0.007 - mae: 0.322 - mean_q: 0.398 - mean_eps: 0.852 - ale.lives: 2.150\n",
      "\n",
      "Interval 18 (170000 steps performed)\n",
      "10000/10000 [==============================] - 318s 32ms/step - reward: 0.0156\n",
      "15 episodes - episode_reward: 10.867 [6.000, 23.000] - loss: 0.008 - mae: 0.360 - mean_q: 0.445 - mean_eps: 0.843 - ale.lives: 2.123\n",
      "\n",
      "Interval 19 (180000 steps performed)\n",
      "10000/10000 [==============================] - 317s 32ms/step - reward: 0.0177\n",
      "12 episodes - episode_reward: 13.667 [2.000, 27.000] - loss: 0.008 - mae: 0.387 - mean_q: 0.478 - mean_eps: 0.834 - ale.lives: 2.122\n",
      "\n",
      "Interval 20 (190000 steps performed)\n",
      "10000/10000 [==============================] - 317s 32ms/step - reward: 0.0145\n",
      "16 episodes - episode_reward: 9.875 [5.000, 17.000] - loss: 0.008 - mae: 0.413 - mean_q: 0.510 - mean_eps: 0.825 - ale.lives: 2.053\n",
      "\n",
      "Interval 21 (200000 steps performed)\n",
      "10000/10000 [==============================] - 314s 31ms/step - reward: 0.0154\n",
      "15 episodes - episode_reward: 9.933 [5.000, 20.000] - loss: 0.009 - mae: 0.435 - mean_q: 0.538 - mean_eps: 0.816 - ale.lives: 2.127\n",
      "\n",
      "Interval 22 (210000 steps performed)\n",
      "10000/10000 [==============================] - 316s 32ms/step - reward: 0.0166\n",
      "13 episodes - episode_reward: 12.077 [6.000, 19.000] - loss: 0.009 - mae: 0.472 - mean_q: 0.583 - mean_eps: 0.807 - ale.lives: 2.064\n",
      "\n",
      "Interval 23 (220000 steps performed)\n",
      "10000/10000 [==============================] - 325s 32ms/step - reward: 0.0165\n",
      "17 episodes - episode_reward: 10.471 [6.000, 21.000] - loss: 0.009 - mae: 0.498 - mean_q: 0.615 - mean_eps: 0.798 - ale.lives: 2.157\n",
      "\n",
      "Interval 24 (230000 steps performed)\n",
      "10000/10000 [==============================] - 321s 32ms/step - reward: 0.0157\n",
      "17 episodes - episode_reward: 9.294 [5.000, 14.000] - loss: 0.009 - mae: 0.526 - mean_q: 0.650 - mean_eps: 0.789 - ale.lives: 2.091\n",
      "\n",
      "Interval 25 (240000 steps performed)\n",
      "10000/10000 [==============================] - 320s 32ms/step - reward: 0.0152\n",
      "13 episodes - episode_reward: 11.692 [3.000, 17.000] - loss: 0.009 - mae: 0.540 - mean_q: 0.667 - mean_eps: 0.780 - ale.lives: 2.088\n",
      "\n",
      "Interval 26 (250000 steps performed)\n",
      "10000/10000 [==============================] - 314s 31ms/step - reward: 0.0171\n",
      "16 episodes - episode_reward: 10.125 [4.000, 15.000] - loss: 0.009 - mae: 0.558 - mean_q: 0.689 - mean_eps: 0.771 - ale.lives: 2.130\n",
      "\n",
      "Interval 27 (260000 steps performed)\n",
      "10000/10000 [==============================] - 323s 32ms/step - reward: 0.0174\n",
      "12 episodes - episode_reward: 14.417 [6.000, 29.000] - loss: 0.009 - mae: 0.586 - mean_q: 0.724 - mean_eps: 0.762 - ale.lives: 2.101\n",
      "\n",
      "Interval 28 (270000 steps performed)\n",
      "10000/10000 [==============================] - 319s 32ms/step - reward: 0.0183\n",
      "16 episodes - episode_reward: 11.875 [5.000, 21.000] - loss: 0.010 - mae: 0.623 - mean_q: 0.770 - mean_eps: 0.753 - ale.lives: 2.127\n",
      "\n",
      "Interval 29 (280000 steps performed)\n",
      "10000/10000 [==============================] - 320s 32ms/step - reward: 0.0156\n",
      "16 episodes - episode_reward: 9.625 [6.000, 14.000] - loss: 0.010 - mae: 0.660 - mean_q: 0.815 - mean_eps: 0.744 - ale.lives: 2.197\n",
      "\n",
      "Interval 30 (290000 steps performed)\n",
      "10000/10000 [==============================] - 318s 32ms/step - reward: 0.0178\n",
      "16 episodes - episode_reward: 11.062 [6.000, 17.000] - loss: 0.011 - mae: 0.698 - mean_q: 0.863 - mean_eps: 0.735 - ale.lives: 2.099\n",
      "\n",
      "Interval 31 (300000 steps performed)\n",
      "10000/10000 [==============================] - 323s 32ms/step - reward: 0.0160\n",
      "18 episodes - episode_reward: 9.222 [3.000, 15.000] - loss: 0.010 - mae: 0.716 - mean_q: 0.883 - mean_eps: 0.726 - ale.lives: 2.135\n",
      "\n",
      "Interval 32 (310000 steps performed)\n",
      "10000/10000 [==============================] - 315s 32ms/step - reward: 0.0193\n",
      "16 episodes - episode_reward: 12.062 [5.000, 31.000] - loss: 0.010 - mae: 0.754 - mean_q: 0.930 - mean_eps: 0.717 - ale.lives: 1.975\n",
      "\n",
      "Interval 33 (320000 steps performed)\n",
      "10000/10000 [==============================] - 317s 32ms/step - reward: 0.0180\n",
      "16 episodes - episode_reward: 11.250 [5.000, 24.000] - loss: 0.012 - mae: 0.825 - mean_q: 1.016 - mean_eps: 0.708 - ale.lives: 1.968\n",
      "\n",
      "Interval 34 (330000 steps performed)\n",
      "10000/10000 [==============================] - 320s 32ms/step - reward: 0.0182\n",
      "16 episodes - episode_reward: 11.375 [6.000, 26.000] - loss: 0.012 - mae: 0.858 - mean_q: 1.054 - mean_eps: 0.699 - ale.lives: 2.157\n",
      "\n",
      "Interval 35 (340000 steps performed)\n",
      "10000/10000 [==============================] - 324s 32ms/step - reward: 0.0192\n",
      "13 episodes - episode_reward: 13.769 [5.000, 23.000] - loss: 0.012 - mae: 0.901 - mean_q: 1.107 - mean_eps: 0.690 - ale.lives: 2.091\n",
      "\n",
      "Interval 36 (350000 steps performed)\n",
      "10000/10000 [==============================] - 320s 32ms/step - reward: 0.0179\n",
      "16 episodes - episode_reward: 11.562 [5.000, 16.000] - loss: 0.012 - mae: 0.916 - mean_q: 1.126 - mean_eps: 0.681 - ale.lives: 2.092\n",
      "\n",
      "Interval 37 (360000 steps performed)\n",
      "10000/10000 [==============================] - 327s 33ms/step - reward: 0.0181\n",
      "15 episodes - episode_reward: 12.467 [5.000, 18.000] - loss: 0.012 - mae: 0.936 - mean_q: 1.149 - mean_eps: 0.672 - ale.lives: 2.104\n",
      "\n",
      "Interval 38 (370000 steps performed)\n",
      "10000/10000 [==============================] - 334s 33ms/step - reward: 0.0187\n",
      "16 episodes - episode_reward: 11.750 [7.000, 19.000] - loss: 0.012 - mae: 0.965 - mean_q: 1.184 - mean_eps: 0.663 - ale.lives: 1.903\n",
      "\n",
      "Interval 39 (380000 steps performed)\n",
      "10000/10000 [==============================] - 330s 33ms/step - reward: 0.0180\n",
      "15 episodes - episode_reward: 11.400 [6.000, 18.000] - loss: 0.012 - mae: 0.991 - mean_q: 1.216 - mean_eps: 0.654 - ale.lives: 2.150\n",
      "\n",
      "Interval 40 (390000 steps performed)\n",
      "10000/10000 [==============================] - 334s 33ms/step - reward: 0.0191\n",
      "13 episodes - episode_reward: 14.077 [8.000, 22.000] - loss: 0.013 - mae: 1.037 - mean_q: 1.271 - mean_eps: 0.645 - ale.lives: 2.180\n",
      "\n",
      "Interval 41 (400000 steps performed)\n",
      "10000/10000 [==============================] - 330s 33ms/step - reward: 0.0201\n",
      "15 episodes - episode_reward: 13.800 [7.000, 25.000] - loss: 0.013 - mae: 1.067 - mean_q: 1.307 - mean_eps: 0.636 - ale.lives: 2.101\n",
      "\n",
      "Interval 42 (410000 steps performed)\n",
      "10000/10000 [==============================] - 334s 33ms/step - reward: 0.0191\n",
      "14 episodes - episode_reward: 14.214 [9.000, 24.000] - loss: 0.013 - mae: 1.109 - mean_q: 1.356 - mean_eps: 0.627 - ale.lives: 2.070\n",
      "\n",
      "Interval 43 (420000 steps performed)\n",
      "10000/10000 [==============================] - 326s 33ms/step - reward: 0.0193\n",
      "14 episodes - episode_reward: 13.714 [6.000, 32.000] - loss: 0.013 - mae: 1.144 - mean_q: 1.399 - mean_eps: 0.618 - ale.lives: 2.134\n",
      "\n",
      "Interval 44 (430000 steps performed)\n",
      "10000/10000 [==============================] - 329s 33ms/step - reward: 0.0198\n",
      "13 episodes - episode_reward: 15.538 [9.000, 25.000] - loss: 0.013 - mae: 1.194 - mean_q: 1.459 - mean_eps: 0.609 - ale.lives: 2.108\n",
      "\n",
      "Interval 45 (440000 steps performed)\n",
      "10000/10000 [==============================] - 336s 34ms/step - reward: 0.0202\n",
      "15 episodes - episode_reward: 12.933 [7.000, 24.000] - loss: 0.014 - mae: 1.236 - mean_q: 1.510 - mean_eps: 0.600 - ale.lives: 2.231\n",
      "\n",
      "Interval 46 (450000 steps performed)\n",
      "10000/10000 [==============================] - 332s 33ms/step - reward: 0.0217\n",
      "12 episodes - episode_reward: 17.417 [9.000, 30.000] - loss: 0.014 - mae: 1.273 - mean_q: 1.554 - mean_eps: 0.591 - ale.lives: 2.165\n",
      "\n",
      "Interval 47 (460000 steps performed)\n",
      "10000/10000 [==============================] - 339s 34ms/step - reward: 0.0185\n",
      "17 episodes - episode_reward: 11.824 [4.000, 17.000] - loss: 0.014 - mae: 1.341 - mean_q: 1.638 - mean_eps: 0.582 - ale.lives: 2.181\n",
      "\n",
      "Interval 48 (470000 steps performed)\n",
      "10000/10000 [==============================] - 342s 34ms/step - reward: 0.0189\n",
      "15 episodes - episode_reward: 11.733 [6.000, 35.000] - loss: 0.014 - mae: 1.378 - mean_q: 1.681 - mean_eps: 0.573 - ale.lives: 2.190\n",
      "\n",
      "Interval 49 (480000 steps performed)\n",
      "10000/10000 [==============================] - 343s 34ms/step - reward: 0.0202\n",
      "14 episodes - episode_reward: 14.571 [8.000, 25.000] - loss: 0.015 - mae: 1.418 - mean_q: 1.729 - mean_eps: 0.564 - ale.lives: 2.144\n",
      "\n",
      "Interval 50 (490000 steps performed)\n",
      "10000/10000 [==============================] - 345s 34ms/step - reward: 0.0200\n",
      "14 episodes - episode_reward: 13.429 [8.000, 22.000] - loss: 0.015 - mae: 1.466 - mean_q: 1.788 - mean_eps: 0.555 - ale.lives: 2.091\n",
      "\n",
      "Interval 51 (500000 steps performed)\n",
      "10000/10000 [==============================] - 345s 35ms/step - reward: 0.0196\n",
      "15 episodes - episode_reward: 14.000 [7.000, 29.000] - loss: 0.015 - mae: 1.499 - mean_q: 1.826 - mean_eps: 0.546 - ale.lives: 2.180\n",
      "\n",
      "Interval 52 (510000 steps performed)\n",
      "10000/10000 [==============================] - 345s 34ms/step - reward: 0.0184\n",
      "14 episodes - episode_reward: 13.714 [7.000, 22.000] - loss: 0.015 - mae: 1.519 - mean_q: 1.852 - mean_eps: 0.537 - ale.lives: 2.057\n",
      "\n",
      "Interval 53 (520000 steps performed)\n",
      "10000/10000 [==============================] - 351s 35ms/step - reward: 0.0199\n",
      "13 episodes - episode_reward: 15.154 [6.000, 24.000] - loss: 0.015 - mae: 1.584 - mean_q: 1.931 - mean_eps: 0.528 - ale.lives: 2.119\n",
      "\n",
      "Interval 54 (530000 steps performed)\n",
      "10000/10000 [==============================] - 348s 35ms/step - reward: 0.0197\n",
      "13 episodes - episode_reward: 14.769 [8.000, 23.000] - loss: 0.015 - mae: 1.605 - mean_q: 1.956 - mean_eps: 0.519 - ale.lives: 2.001\n",
      "\n",
      "Interval 55 (540000 steps performed)\n",
      "10000/10000 [==============================] - 355s 35ms/step - reward: 0.0207\n",
      "13 episodes - episode_reward: 16.231 [10.000, 26.000] - loss: 0.016 - mae: 1.623 - mean_q: 1.975 - mean_eps: 0.510 - ale.lives: 2.230\n",
      "\n",
      "Interval 56 (550000 steps performed)\n",
      "10000/10000 [==============================] - 356s 36ms/step - reward: 0.0207\n",
      "14 episodes - episode_reward: 14.643 [8.000, 26.000] - loss: 0.015 - mae: 1.636 - mean_q: 1.991 - mean_eps: 0.501 - ale.lives: 2.234\n",
      "\n",
      "Interval 57 (560000 steps performed)\n",
      "10000/10000 [==============================] - 357s 36ms/step - reward: 0.0195\n",
      "12 episodes - episode_reward: 15.000 [6.000, 20.000] - loss: 0.015 - mae: 1.661 - mean_q: 2.018 - mean_eps: 0.492 - ale.lives: 2.174\n",
      "\n",
      "Interval 58 (570000 steps performed)\n",
      "10000/10000 [==============================] - 361s 36ms/step - reward: 0.0209\n",
      "14 episodes - episode_reward: 16.357 [7.000, 32.000] - loss: 0.016 - mae: 1.679 - mean_q: 2.040 - mean_eps: 0.483 - ale.lives: 2.054\n",
      "\n",
      "Interval 59 (580000 steps performed)\n",
      "10000/10000 [==============================] - 359s 36ms/step - reward: 0.0191\n",
      "14 episodes - episode_reward: 13.714 [7.000, 25.000] - loss: 0.016 - mae: 1.714 - mean_q: 2.082 - mean_eps: 0.474 - ale.lives: 2.116\n",
      "\n",
      "Interval 60 (590000 steps performed)\n",
      "10000/10000 [==============================] - 364s 36ms/step - reward: 0.0207\n",
      "13 episodes - episode_reward: 15.462 [8.000, 33.000] - loss: 0.016 - mae: 1.751 - mean_q: 2.126 - mean_eps: 0.465 - ale.lives: 2.203\n",
      "\n",
      "Interval 61 (600000 steps performed)\n",
      "10000/10000 [==============================] - 365s 37ms/step - reward: 0.0209\n",
      "13 episodes - episode_reward: 16.231 [10.000, 27.000] - loss: 0.016 - mae: 1.820 - mean_q: 2.209 - mean_eps: 0.456 - ale.lives: 2.010\n",
      "\n",
      "Interval 62 (610000 steps performed)\n",
      "10000/10000 [==============================] - 365s 37ms/step - reward: 0.0208\n",
      "13 episodes - episode_reward: 15.231 [7.000, 27.000] - loss: 0.016 - mae: 1.840 - mean_q: 2.232 - mean_eps: 0.447 - ale.lives: 2.139\n",
      "\n",
      "Interval 63 (620000 steps performed)\n",
      "10000/10000 [==============================] - 368s 37ms/step - reward: 0.0204\n",
      "14 episodes - episode_reward: 14.571 [8.000, 25.000] - loss: 0.016 - mae: 1.855 - mean_q: 2.249 - mean_eps: 0.438 - ale.lives: 2.263\n",
      "\n",
      "Interval 64 (630000 steps performed)\n",
      "10000/10000 [==============================] - 376s 38ms/step - reward: 0.0189\n",
      "16 episodes - episode_reward: 12.688 [6.000, 24.000] - loss: 0.016 - mae: 1.909 - mean_q: 2.314 - mean_eps: 0.429 - ale.lives: 2.146\n",
      "\n",
      "Interval 65 (640000 steps performed)\n",
      "10000/10000 [==============================] - 374s 37ms/step - reward: 0.0198\n",
      "15 episodes - episode_reward: 13.133 [8.000, 22.000] - loss: 0.016 - mae: 1.917 - mean_q: 2.324 - mean_eps: 0.420 - ale.lives: 2.094\n",
      "\n",
      "Interval 66 (650000 steps performed)\n",
      "10000/10000 [==============================] - 390s 39ms/step - reward: 0.0203\n",
      "14 episodes - episode_reward: 13.429 [6.000, 24.000] - loss: 0.016 - mae: 1.942 - mean_q: 2.354 - mean_eps: 0.411 - ale.lives: 2.191\n",
      "\n",
      "Interval 67 (660000 steps performed)\n",
      "10000/10000 [==============================] - 386s 39ms/step - reward: 0.0224\n",
      "14 episodes - episode_reward: 15.714 [10.000, 29.000] - loss: 0.016 - mae: 1.973 - mean_q: 2.392 - mean_eps: 0.402 - ale.lives: 2.250\n",
      "\n",
      "Interval 68 (670000 steps performed)\n",
      "10000/10000 [==============================] - 387s 39ms/step - reward: 0.0232\n",
      "13 episodes - episode_reward: 18.846 [7.000, 33.000] - loss: 0.016 - mae: 2.004 - mean_q: 2.430 - mean_eps: 0.393 - ale.lives: 2.286\n",
      "\n",
      "Interval 69 (680000 steps performed)\n",
      "10000/10000 [==============================] - 388s 39ms/step - reward: 0.0186\n",
      "11 episodes - episode_reward: 16.364 [6.000, 29.000] - loss: 0.016 - mae: 2.029 - mean_q: 2.459 - mean_eps: 0.384 - ale.lives: 2.023\n",
      "\n",
      "Interval 70 (690000 steps performed)\n",
      "10000/10000 [==============================] - 393s 39ms/step - reward: 0.0198\n",
      "16 episodes - episode_reward: 12.562 [4.000, 21.000] - loss: 0.017 - mae: 2.071 - mean_q: 2.509 - mean_eps: 0.375 - ale.lives: 2.037\n",
      "\n",
      "Interval 71 (700000 steps performed)\n",
      "10000/10000 [==============================] - 393s 39ms/step - reward: 0.0184\n",
      "15 episodes - episode_reward: 12.333 [4.000, 20.000] - loss: 0.017 - mae: 2.127 - mean_q: 2.577 - mean_eps: 0.366 - ale.lives: 2.033\n",
      "\n",
      "Interval 72 (710000 steps performed)\n",
      "10000/10000 [==============================] - 397s 40ms/step - reward: 0.0173\n",
      "15 episodes - episode_reward: 12.067 [6.000, 19.000] - loss: 0.018 - mae: 2.175 - mean_q: 2.633 - mean_eps: 0.357 - ale.lives: 2.119\n",
      "\n",
      "Interval 73 (720000 steps performed)\n",
      "10000/10000 [==============================] - 407s 41ms/step - reward: 0.0208\n",
      "13 episodes - episode_reward: 15.154 [7.000, 23.000] - loss: 0.018 - mae: 2.213 - mean_q: 2.678 - mean_eps: 0.348 - ale.lives: 2.087\n",
      "\n",
      "Interval 74 (730000 steps performed)\n",
      "10000/10000 [==============================] - 403s 40ms/step - reward: 0.0192\n",
      "16 episodes - episode_reward: 12.750 [5.000, 23.000] - loss: 0.019 - mae: 2.258 - mean_q: 2.734 - mean_eps: 0.339 - ale.lives: 1.990\n",
      "\n",
      "Interval 75 (740000 steps performed)\n",
      "10000/10000 [==============================] - 403s 40ms/step - reward: 0.0197\n",
      "14 episodes - episode_reward: 14.000 [7.000, 22.000] - loss: 0.019 - mae: 2.284 - mean_q: 2.765 - mean_eps: 0.330 - ale.lives: 2.124\n",
      "\n",
      "Interval 76 (750000 steps performed)\n",
      "10000/10000 [==============================] - 410s 41ms/step - reward: 0.0199\n",
      "13 episodes - episode_reward: 14.615 [6.000, 21.000] - loss: 0.019 - mae: 2.311 - mean_q: 2.798 - mean_eps: 0.321 - ale.lives: 2.183\n",
      "\n",
      "Interval 77 (760000 steps performed)\n",
      "10000/10000 [==============================] - 407s 41ms/step - reward: 0.0205\n",
      "14 episodes - episode_reward: 15.357 [6.000, 28.000] - loss: 0.018 - mae: 2.321 - mean_q: 2.807 - mean_eps: 0.312 - ale.lives: 2.199\n",
      "\n",
      "Interval 78 (770000 steps performed)\n",
      "10000/10000 [==============================] - 416s 42ms/step - reward: 0.0204\n",
      "12 episodes - episode_reward: 15.917 [9.000, 31.000] - loss: 0.019 - mae: 2.363 - mean_q: 2.858 - mean_eps: 0.303 - ale.lives: 2.013\n",
      "\n",
      "Interval 79 (780000 steps performed)\n",
      "10000/10000 [==============================] - 420s 42ms/step - reward: 0.0186\n",
      "14 episodes - episode_reward: 13.929 [4.000, 22.000] - loss: 0.019 - mae: 2.381 - mean_q: 2.879 - mean_eps: 0.294 - ale.lives: 2.080\n",
      "\n",
      "Interval 80 (790000 steps performed)\n",
      "10000/10000 [==============================] - 421s 42ms/step - reward: 0.0182\n",
      "14 episodes - episode_reward: 13.143 [7.000, 22.000] - loss: 0.020 - mae: 2.378 - mean_q: 2.876 - mean_eps: 0.285 - ale.lives: 2.095\n",
      "\n",
      "Interval 81 (800000 steps performed)\n",
      "10000/10000 [==============================] - 425s 43ms/step - reward: 0.0182\n",
      "13 episodes - episode_reward: 13.538 [8.000, 25.000] - loss: 0.019 - mae: 2.414 - mean_q: 2.919 - mean_eps: 0.276 - ale.lives: 2.109\n",
      "\n",
      "Interval 82 (810000 steps performed)\n",
      "10000/10000 [==============================] - 425s 43ms/step - reward: 0.0204\n",
      "13 episodes - episode_reward: 15.769 [10.000, 22.000] - loss: 0.019 - mae: 2.451 - mean_q: 2.964 - mean_eps: 0.267 - ale.lives: 2.297\n",
      "\n",
      "Interval 83 (820000 steps performed)\n",
      "10000/10000 [==============================] - 429s 43ms/step - reward: 0.0209\n",
      "13 episodes - episode_reward: 15.923 [10.000, 22.000] - loss: 0.019 - mae: 2.477 - mean_q: 2.993 - mean_eps: 0.258 - ale.lives: 2.052\n",
      "\n",
      "Interval 84 (830000 steps performed)\n",
      "10000/10000 [==============================] - 431s 43ms/step - reward: 0.0182\n",
      "13 episodes - episode_reward: 14.615 [5.000, 23.000] - loss: 0.019 - mae: 2.498 - mean_q: 3.019 - mean_eps: 0.249 - ale.lives: 1.953\n",
      "\n",
      "Interval 85 (840000 steps performed)\n",
      "10000/10000 [==============================] - 446s 45ms/step - reward: 0.0201\n",
      "12 episodes - episode_reward: 15.833 [7.000, 24.000] - loss: 0.019 - mae: 2.530 - mean_q: 3.056 - mean_eps: 0.240 - ale.lives: 2.054\n",
      "\n",
      "Interval 86 (850000 steps performed)\n",
      "10000/10000 [==============================] - 436s 44ms/step - reward: 0.0195\n",
      "15 episodes - episode_reward: 12.800 [7.000, 21.000] - loss: 0.020 - mae: 2.564 - mean_q: 3.096 - mean_eps: 0.231 - ale.lives: 2.059\n",
      "\n",
      "Interval 87 (860000 steps performed)\n",
      "10000/10000 [==============================] - 443s 44ms/step - reward: 0.0189\n",
      "16 episodes - episode_reward: 12.125 [6.000, 23.000] - loss: 0.019 - mae: 2.568 - mean_q: 3.099 - mean_eps: 0.222 - ale.lives: 2.035\n",
      "\n",
      "Interval 88 (870000 steps performed)\n",
      "10000/10000 [==============================] - 447s 45ms/step - reward: 0.0203\n",
      "13 episodes - episode_reward: 15.615 [7.000, 27.000] - loss: 0.020 - mae: 2.572 - mean_q: 3.105 - mean_eps: 0.213 - ale.lives: 2.129\n",
      "\n",
      "Interval 89 (880000 steps performed)\n",
      "10000/10000 [==============================] - 449s 45ms/step - reward: 0.0191\n",
      "14 episodes - episode_reward: 14.143 [7.000, 27.000] - loss: 0.020 - mae: 2.599 - mean_q: 3.135 - mean_eps: 0.204 - ale.lives: 2.154\n",
      "\n",
      "Interval 90 (890000 steps performed)\n",
      "10000/10000 [==============================] - 451s 45ms/step - reward: 0.0208\n",
      "14 episodes - episode_reward: 14.357 [4.000, 24.000] - loss: 0.019 - mae: 2.636 - mean_q: 3.182 - mean_eps: 0.195 - ale.lives: 2.165\n",
      "\n",
      "Interval 91 (900000 steps performed)\n",
      "10000/10000 [==============================] - 459s 46ms/step - reward: 0.0209\n",
      "14 episodes - episode_reward: 14.857 [4.000, 23.000] - loss: 0.019 - mae: 2.641 - mean_q: 3.187 - mean_eps: 0.186 - ale.lives: 2.041\n",
      "\n",
      "Interval 92 (910000 steps performed)\n",
      "10000/10000 [==============================] - 460s 46ms/step - reward: 0.0193\n",
      "15 episodes - episode_reward: 13.067 [7.000, 22.000] - loss: 0.020 - mae: 2.675 - mean_q: 3.229 - mean_eps: 0.177 - ale.lives: 2.013\n",
      "\n",
      "Interval 93 (920000 steps performed)\n",
      "10000/10000 [==============================] - 468s 47ms/step - reward: 0.0201\n",
      "15 episodes - episode_reward: 13.533 [4.000, 23.000] - loss: 0.020 - mae: 2.674 - mean_q: 3.227 - mean_eps: 0.168 - ale.lives: 2.166\n",
      "\n",
      "Interval 94 (930000 steps performed)\n",
      "10000/10000 [==============================] - 477s 48ms/step - reward: 0.0209\n",
      "11 episodes - episode_reward: 18.909 [11.000, 28.000] - loss: 0.020 - mae: 2.713 - mean_q: 3.274 - mean_eps: 0.159 - ale.lives: 2.147\n",
      "\n",
      "Interval 95 (940000 steps performed)\n",
      "10000/10000 [==============================] - 474s 47ms/step - reward: 0.0197\n",
      "13 episodes - episode_reward: 15.308 [8.000, 24.000] - loss: 0.021 - mae: 2.727 - mean_q: 3.291 - mean_eps: 0.150 - ale.lives: 2.261\n",
      "\n",
      "Interval 96 (950000 steps performed)\n",
      "10000/10000 [==============================] - 475s 48ms/step - reward: 0.0204\n",
      "14 episodes - episode_reward: 14.786 [7.000, 22.000] - loss: 0.020 - mae: 2.746 - mean_q: 3.313 - mean_eps: 0.141 - ale.lives: 2.088\n",
      "\n",
      "Interval 97 (960000 steps performed)\n",
      "10000/10000 [==============================] - 484s 48ms/step - reward: 0.0217\n",
      "12 episodes - episode_reward: 16.500 [7.000, 29.000] - loss: 0.020 - mae: 2.747 - mean_q: 3.314 - mean_eps: 0.132 - ale.lives: 2.086\n",
      "\n",
      "Interval 98 (970000 steps performed)\n",
      "10000/10000 [==============================] - 489s 49ms/step - reward: 0.0203\n",
      "13 episodes - episode_reward: 16.385 [4.000, 28.000] - loss: 0.020 - mae: 2.753 - mean_q: 3.323 - mean_eps: 0.123 - ale.lives: 2.148\n",
      "\n",
      "Interval 99 (980000 steps performed)\n",
      "10000/10000 [==============================] - 494s 49ms/step - reward: 0.0224\n",
      "14 episodes - episode_reward: 15.786 [6.000, 26.000] - loss: 0.021 - mae: 2.772 - mean_q: 3.344 - mean_eps: 0.114 - ale.lives: 2.149\n",
      "\n",
      "Interval 100 (990000 steps performed)\n",
      "10000/10000 [==============================] - 501s 50ms/step - reward: 0.0209\n",
      "13 episodes - episode_reward: 16.615 [11.000, 25.000] - loss: 0.019 - mae: 2.773 - mean_q: 3.346 - mean_eps: 0.105 - ale.lives: 2.066\n",
      "\n",
      "Interval 101 (1000000 steps performed)\n",
      "10000/10000 [==============================] - 499s 50ms/step - reward: 0.0209\n",
      "10 episodes - episode_reward: 19.700 [10.000, 29.000] - loss: 0.021 - mae: 2.779 - mean_q: 3.352 - mean_eps: 0.100 - ale.lives: 2.092\n",
      "\n",
      "Interval 102 (1010000 steps performed)\n",
      "10000/10000 [==============================] - 499s 50ms/step - reward: 0.0212\n",
      "11 episodes - episode_reward: 18.636 [13.000, 24.000] - loss: 0.021 - mae: 2.788 - mean_q: 3.364 - mean_eps: 0.100 - ale.lives: 2.147\n",
      "\n",
      "Interval 103 (1020000 steps performed)\n",
      "10000/10000 [==============================] - 502s 50ms/step - reward: 0.0223\n",
      "14 episodes - episode_reward: 17.429 [5.000, 35.000] - loss: 0.020 - mae: 2.797 - mean_q: 3.374 - mean_eps: 0.100 - ale.lives: 2.284\n",
      "\n",
      "Interval 104 (1030000 steps performed)\n",
      "10000/10000 [==============================] - 502s 50ms/step - reward: 0.0197\n",
      "13 episodes - episode_reward: 15.000 [3.000, 24.000] - loss: 0.020 - mae: 2.800 - mean_q: 3.379 - mean_eps: 0.100 - ale.lives: 2.177\n",
      "\n",
      "Interval 105 (1040000 steps performed)\n",
      "10000/10000 [==============================] - 504s 50ms/step - reward: 0.0194\n",
      "14 episodes - episode_reward: 14.357 [6.000, 23.000] - loss: 0.020 - mae: 2.796 - mean_q: 3.373 - mean_eps: 0.100 - ale.lives: 2.034\n",
      "\n",
      "Interval 106 (1050000 steps performed)\n",
      "10000/10000 [==============================] - 502s 50ms/step - reward: 0.0213\n",
      "13 episodes - episode_reward: 15.231 [7.000, 25.000] - loss: 0.020 - mae: 2.825 - mean_q: 3.410 - mean_eps: 0.100 - ale.lives: 2.089\n",
      "\n",
      "Interval 107 (1060000 steps performed)\n",
      "10000/10000 [==============================] - 506s 51ms/step - reward: 0.0200\n",
      "12 episodes - episode_reward: 17.167 [11.000, 24.000] - loss: 0.021 - mae: 2.815 - mean_q: 3.396 - mean_eps: 0.100 - ale.lives: 2.080\n",
      "\n",
      "Interval 108 (1070000 steps performed)\n",
      "10000/10000 [==============================] - 529s 53ms/step - reward: 0.0201\n",
      "13 episodes - episode_reward: 15.615 [6.000, 31.000] - loss: 0.020 - mae: 2.814 - mean_q: 3.395 - mean_eps: 0.100 - ale.lives: 2.041\n",
      "\n",
      "Interval 109 (1080000 steps performed)\n",
      "10000/10000 [==============================] - 516s 52ms/step - reward: 0.0211\n",
      "12 episodes - episode_reward: 17.333 [7.000, 28.000] - loss: 0.020 - mae: 2.820 - mean_q: 3.401 - mean_eps: 0.100 - ale.lives: 2.144\n",
      "\n",
      "Interval 110 (1090000 steps performed)\n",
      "10000/10000 [==============================] - 521s 52ms/step - reward: 0.0205\n",
      "13 episodes - episode_reward: 16.538 [8.000, 22.000] - loss: 0.019 - mae: 2.821 - mean_q: 3.404 - mean_eps: 0.100 - ale.lives: 2.239\n",
      "\n",
      "Interval 111 (1100000 steps performed)\n",
      "10000/10000 [==============================] - 529s 53ms/step - reward: 0.0215\n",
      "10 episodes - episode_reward: 19.900 [9.000, 35.000] - loss: 0.020 - mae: 2.814 - mean_q: 3.393 - mean_eps: 0.100 - ale.lives: 2.194\n",
      "\n",
      "Interval 112 (1110000 steps performed)\n",
      "10000/10000 [==============================] - 516s 52ms/step - reward: 0.0190\n",
      "12 episodes - episode_reward: 16.417 [8.000, 33.000] - loss: 0.020 - mae: 2.839 - mean_q: 3.422 - mean_eps: 0.100 - ale.lives: 2.127\n",
      "\n",
      "Interval 113 (1120000 steps performed)\n",
      "10000/10000 [==============================] - 520s 52ms/step - reward: 0.0207\n",
      "12 episodes - episode_reward: 16.833 [8.000, 26.000] - loss: 0.019 - mae: 2.863 - mean_q: 3.451 - mean_eps: 0.100 - ale.lives: 2.081\n",
      "\n",
      "Interval 114 (1130000 steps performed)\n",
      "10000/10000 [==============================] - 534s 53ms/step - reward: 0.0212\n",
      "13 episodes - episode_reward: 16.231 [10.000, 31.000] - loss: 0.019 - mae: 2.880 - mean_q: 3.473 - mean_eps: 0.100 - ale.lives: 2.242\n",
      "\n",
      "Interval 115 (1140000 steps performed)\n",
      "10000/10000 [==============================] - 532s 53ms/step - reward: 0.0203\n",
      "11 episodes - episode_reward: 18.636 [7.000, 27.000] - loss: 0.020 - mae: 2.901 - mean_q: 3.498 - mean_eps: 0.100 - ale.lives: 2.194\n",
      "\n",
      "Interval 116 (1150000 steps performed)\n",
      "10000/10000 [==============================] - 531s 53ms/step - reward: 0.0204\n",
      "11 episodes - episode_reward: 18.273 [11.000, 24.000] - loss: 0.020 - mae: 2.901 - mean_q: 3.498 - mean_eps: 0.100 - ale.lives: 2.044\n",
      "\n",
      "Interval 117 (1160000 steps performed)\n",
      "10000/10000 [==============================] - 515s 51ms/step - reward: 0.0222\n",
      "12 episodes - episode_reward: 18.250 [8.000, 29.000] - loss: 0.020 - mae: 2.911 - mean_q: 3.510 - mean_eps: 0.100 - ale.lives: 2.165\n",
      "\n",
      "Interval 118 (1170000 steps performed)\n",
      "10000/10000 [==============================] - 522s 52ms/step - reward: 0.0194\n",
      "12 episodes - episode_reward: 16.667 [9.000, 22.000] - loss: 0.021 - mae: 2.917 - mean_q: 3.517 - mean_eps: 0.100 - ale.lives: 2.056\n",
      "\n",
      "Interval 119 (1180000 steps performed)\n",
      "10000/10000 [==============================] - 523s 52ms/step - reward: 0.0207\n",
      "11 episodes - episode_reward: 20.000 [14.000, 29.000] - loss: 0.020 - mae: 2.942 - mean_q: 3.547 - mean_eps: 0.100 - ale.lives: 2.175\n",
      "\n",
      "Interval 120 (1190000 steps performed)\n",
      "10000/10000 [==============================] - 524s 52ms/step - reward: 0.0197\n",
      "11 episodes - episode_reward: 16.909 [7.000, 28.000] - loss: 0.020 - mae: 2.952 - mean_q: 3.560 - mean_eps: 0.100 - ale.lives: 2.245\n",
      "\n",
      "Interval 121 (1200000 steps performed)\n",
      "10000/10000 [==============================] - 530s 53ms/step - reward: 0.0211\n",
      "11 episodes - episode_reward: 19.364 [11.000, 30.000] - loss: 0.020 - mae: 2.977 - mean_q: 3.588 - mean_eps: 0.100 - ale.lives: 2.197\n",
      "\n",
      "Interval 122 (1210000 steps performed)\n",
      "10000/10000 [==============================] - 521s 52ms/step - reward: 0.0190\n",
      "12 episodes - episode_reward: 15.833 [6.000, 31.000] - loss: 0.020 - mae: 2.981 - mean_q: 3.592 - mean_eps: 0.100 - ale.lives: 2.022\n",
      "\n",
      "Interval 123 (1220000 steps performed)\n",
      "10000/10000 [==============================] - 522s 52ms/step - reward: 0.02023\n",
      "13 episodes - episode_reward: 15.538 [7.000, 31.000] - loss: 0.020 - mae: 3.014 - mean_q: 3.634 - mean_eps: 0.100 - ale.lives: 2.046\n",
      "\n",
      "Interval 124 (1230000 steps performed)\n",
      "10000/10000 [==============================] - 522s 52ms/step - reward: 0.0190\n",
      "11 episodes - episode_reward: 18.091 [6.000, 30.000] - loss: 0.022 - mae: 3.026 - mean_q: 3.646 - mean_eps: 0.100 - ale.lives: 2.155\n",
      "\n",
      "Interval 125 (1240000 steps performed)\n",
      "10000/10000 [==============================] - 520s 52ms/step - reward: 0.0182\n",
      "12 episodes - episode_reward: 15.083 [6.000, 30.000] - loss: 0.021 - mae: 3.046 - mean_q: 3.670 - mean_eps: 0.100 - ale.lives: 2.073\n",
      "\n",
      "Interval 126 (1250000 steps performed)\n",
      "10000/10000 [==============================] - 523s 52ms/step - reward: 0.0203\n",
      "12 episodes - episode_reward: 17.000 [5.000, 29.000] - loss: 0.021 - mae: 3.058 - mean_q: 3.685 - mean_eps: 0.100 - ale.lives: 2.211\n",
      "\n",
      "Interval 127 (1260000 steps performed)\n",
      "10000/10000 [==============================] - 521s 52ms/step - reward: 0.0191\n",
      "12 episodes - episode_reward: 15.167 [8.000, 24.000] - loss: 0.021 - mae: 3.080 - mean_q: 3.711 - mean_eps: 0.100 - ale.lives: 2.062\n",
      "\n",
      "Interval 128 (1270000 steps performed)\n",
      "10000/10000 [==============================] - 520s 52ms/step - reward: 0.0224\n",
      "12 episodes - episode_reward: 18.583 [10.000, 27.000] - loss: 0.021 - mae: 3.084 - mean_q: 3.717 - mean_eps: 0.100 - ale.lives: 2.134\n",
      "\n",
      "Interval 129 (1280000 steps performed)\n",
      "10000/10000 [==============================] - 526s 53ms/step - reward: 0.0211\n",
      "13 episodes - episode_reward: 16.538 [5.000, 27.000] - loss: 0.020 - mae: 3.091 - mean_q: 3.727 - mean_eps: 0.100 - ale.lives: 2.167\n",
      "\n",
      "Interval 130 (1290000 steps performed)\n",
      "10000/10000 [==============================] - 512s 51ms/step - reward: 0.0197\n",
      "11 episodes - episode_reward: 18.364 [13.000, 24.000] - loss: 0.021 - mae: 3.131 - mean_q: 3.774 - mean_eps: 0.100 - ale.lives: 2.181\n",
      "\n",
      "Interval 131 (1300000 steps performed)\n",
      "10000/10000 [==============================] - 527s 53ms/step - reward: 0.0209\n",
      "12 episodes - episode_reward: 17.333 [9.000, 24.000] - loss: 0.021 - mae: 3.149 - mean_q: 3.795 - mean_eps: 0.100 - ale.lives: 2.040\n",
      "\n",
      "Interval 132 (1310000 steps performed)\n",
      "10000/10000 [==============================] - 525s 53ms/step - reward: 0.0214\n",
      "11 episodes - episode_reward: 19.636 [11.000, 28.000] - loss: 0.021 - mae: 3.145 - mean_q: 3.790 - mean_eps: 0.100 - ale.lives: 2.022\n",
      "\n",
      "Interval 133 (1320000 steps performed)\n",
      "10000/10000 [==============================] - 519s 52ms/step - reward: 0.0203\n",
      "11 episodes - episode_reward: 16.909 [6.000, 27.000] - loss: 0.021 - mae: 3.147 - mean_q: 3.792 - mean_eps: 0.100 - ale.lives: 2.148\n",
      "\n",
      "Interval 134 (1330000 steps performed)\n",
      "10000/10000 [==============================] - 529s 53ms/step - reward: 0.0223\n",
      "13 episodes - episode_reward: 16.846 [7.000, 24.000] - loss: 0.021 - mae: 3.168 - mean_q: 3.818 - mean_eps: 0.100 - ale.lives: 2.229\n",
      "\n",
      "Interval 135 (1340000 steps performed)\n",
      "10000/10000 [==============================] - 529s 53ms/step - reward: 0.0220\n",
      "11 episodes - episode_reward: 20.182 [16.000, 26.000] - loss: 0.022 - mae: 3.191 - mean_q: 3.847 - mean_eps: 0.100 - ale.lives: 2.117\n",
      "\n",
      "Interval 136 (1350000 steps performed)\n",
      "10000/10000 [==============================] - 531s 53ms/step - reward: 0.0199\n",
      "11 episodes - episode_reward: 19.818 [12.000, 28.000] - loss: 0.023 - mae: 3.192 - mean_q: 3.848 - mean_eps: 0.100 - ale.lives: 2.221\n",
      "\n",
      "Interval 137 (1360000 steps performed)\n",
      "10000/10000 [==============================] - 520s 52ms/step - reward: 0.0211\n",
      "11 episodes - episode_reward: 18.364 [10.000, 33.000] - loss: 0.021 - mae: 3.207 - mean_q: 3.866 - mean_eps: 0.100 - ale.lives: 2.185\n",
      "\n",
      "Interval 138 (1370000 steps performed)\n",
      "10000/10000 [==============================] - 532s 53ms/step - reward: 0.0203\n",
      "14 episodes - episode_reward: 14.786 [6.000, 26.000] - loss: 0.022 - mae: 3.218 - mean_q: 3.878 - mean_eps: 0.100 - ale.lives: 2.141\n",
      "\n",
      "Interval 139 (1380000 steps performed)\n",
      "10000/10000 [==============================] - 523s 52ms/step - reward: 0.0195\n",
      "12 episodes - episode_reward: 15.917 [7.000, 19.000] - loss: 0.021 - mae: 3.205 - mean_q: 3.863 - mean_eps: 0.100 - ale.lives: 2.106\n",
      "\n",
      "Interval 140 (1390000 steps performed)\n",
      "10000/10000 [==============================] - 534s 53ms/step - reward: 0.0209\n",
      "14 episodes - episode_reward: 15.500 [3.000, 25.000] - loss: 0.021 - mae: 3.202 - mean_q: 3.859 - mean_eps: 0.100 - ale.lives: 2.169\n",
      "\n",
      "Interval 141 (1400000 steps performed)\n",
      "10000/10000 [==============================] - 531s 53ms/step - reward: 0.0227\n",
      "11 episodes - episode_reward: 20.727 [3.000, 34.000] - loss: 0.021 - mae: 3.227 - mean_q: 3.888 - mean_eps: 0.100 - ale.lives: 2.238\n",
      "\n",
      "Interval 142 (1410000 steps performed)\n",
      "10000/10000 [==============================] - 535s 53ms/step - reward: 0.0210\n",
      "12 episodes - episode_reward: 17.417 [4.000, 27.000] - loss: 0.021 - mae: 3.252 - mean_q: 3.919 - mean_eps: 0.100 - ale.lives: 2.139\n",
      "\n",
      "Interval 143 (1420000 steps performed)\n",
      "10000/10000 [==============================] - 533s 53ms/step - reward: 0.0227\n",
      "12 episodes - episode_reward: 19.000 [8.000, 28.000] - loss: 0.022 - mae: 3.219 - mean_q: 3.879 - mean_eps: 0.100 - ale.lives: 2.249\n",
      "\n",
      "Interval 144 (1430000 steps performed)\n",
      "10000/10000 [==============================] - 521s 52ms/step - reward: 0.0192\n",
      "12 episodes - episode_reward: 16.000 [3.000, 30.000] - loss: 0.022 - mae: 3.228 - mean_q: 3.889 - mean_eps: 0.100 - ale.lives: 2.218\n",
      "\n",
      "Interval 145 (1440000 steps performed)\n",
      "10000/10000 [==============================] - 522s 52ms/step - reward: 0.0202\n",
      "11 episodes - episode_reward: 16.000 [7.000, 25.000] - loss: 0.021 - mae: 3.236 - mean_q: 3.901 - mean_eps: 0.100 - ale.lives: 2.144\n",
      "\n",
      "Interval 146 (1450000 steps performed)\n",
      "10000/10000 [==============================] - 535s 53ms/step - reward: 0.0201\n",
      "14 episodes - episode_reward: 15.214 [7.000, 28.000] - loss: 0.021 - mae: 3.266 - mean_q: 3.938 - mean_eps: 0.100 - ale.lives: 2.110\n",
      "\n",
      "Interval 147 (1460000 steps performed)\n",
      "10000/10000 [==============================] - 528s 53ms/step - reward: 0.0201\n",
      "11 episodes - episode_reward: 18.364 [4.000, 28.000] - loss: 0.022 - mae: 3.304 - mean_q: 3.982 - mean_eps: 0.100 - ale.lives: 2.099\n",
      "\n",
      "Interval 148 (1470000 steps performed)\n",
      "10000/10000 [==============================] - 536s 54ms/step - reward: 0.0219\n",
      "14 episodes - episode_reward: 15.214 [7.000, 28.000] - loss: 0.021 - mae: 3.315 - mean_q: 3.995 - mean_eps: 0.100 - ale.lives: 2.095\n",
      "\n",
      "Interval 149 (1480000 steps performed)\n",
      "10000/10000 [==============================] - 532s 53ms/step - reward: 0.0215\n",
      "12 episodes - episode_reward: 18.250 [4.000, 32.000] - loss: 0.021 - mae: 3.336 - mean_q: 4.021 - mean_eps: 0.100 - ale.lives: 2.204\n",
      "\n",
      "Interval 150 (1490000 steps performed)\n",
      "10000/10000 [==============================] - 532s 53ms/step - reward: 0.0224\n",
      "done, took 61423.458 seconds\n"
     ]
    }
   ],
   "source": [
    "history=dqn.fit(env, nb_steps=1500000, visualize=False, verbose=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "##### Guardado de pesos\n",
    "dqn.save_weights('dqn_spaceinvaders_weights.h5f', overwrite=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Obtener las métricas\n",
    "rewards = history.history['episode_reward']\n",
    "steps = history.history['nb_steps']\n",
    "\n",
    "# Crear el gráfico\n",
    "plt.plot(steps, rewards)\n",
    "plt.xlabel('Steps')\n",
    "plt.ylabel('Rewards')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing for 10 episodes ...\n",
      "Episode 1: reward: 11.000, steps: 600\n",
      "Episode 2: reward: 6.000, steps: 584\n",
      "Episode 3: reward: 3.000, steps: 314\n",
      "Episode 4: reward: 12.000, steps: 676\n",
      "Episode 5: reward: 15.000, steps: 663\n",
      "Episode 6: reward: 16.000, steps: 647\n",
      "Episode 7: reward: 12.000, steps: 504\n",
      "Episode 8: reward: 4.000, steps: 375\n",
      "Episode 9: reward: 15.000, steps: 951\n",
      "Episode 10: reward: 7.000, steps: 759\n",
      "Media de recompensa: 10.1\n"
     ]
    }
   ],
   "source": [
    "#Evaluación en modo test\n",
    "scores = dqn.test(env, nb_episodes=10, visualize=True)\n",
    "print(\"Media de recompensa:\", np.mean(scores.history['episode_reward']))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "-NAlu8b1Gb2b"
   },
   "source": [
    "3. Justificación de los parámetros seleccionados y de los resultados obtenidos"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ANFQiicXK3sO"
   },
   "source": [
    "---"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python [miar_rl]",
   "language": "python",
   "name": "miar_rl"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
